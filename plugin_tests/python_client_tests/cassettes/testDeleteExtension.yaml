interactions:
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Authorization: [Basic YWRtaW46cGFzc3dvcmQ=]
      Connection: [keep-alive]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1/user/authentication
  response:
    body: {string: '{"authToken": {"expires": "2018-10-20T23:02:59.979822+00:00",
        "scope": ["core.user_auth"], "token": "4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7"},
        "message": "Login succeeded.", "user": {"_accessLevel": 2, "_id": "5ab5422344e48104c10bcc26",
        "_modelType": "user", "admin": true, "created": "2018-03-23T18:06:27.126000+00:00",
        "email": "admin@email.com", "emailVerified": false, "firstName": "Admin",
        "groupInvites": [], "groups": [], "lastName": "Admin", "login": "admin", "public":
        true, "size": 0, "status": "enabled"}}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['542']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:02:59 GMT']
      Server: [Girder 2.5.0]
      Set-Cookie: ['girderToken=4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7;
          expires=Sat, 20 Oct 2018 23:02:59 GMT; Path=/']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app?name=App&app_description=random+description+1
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019660+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023094+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['741']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App1
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app?name=App1&app_description=random+description+2
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde55", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.055839+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        2", "lowerName": "app1", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App1", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.058584+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=Release
  response:
    body: {string: 'null'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['4']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?name=Release&app_revision=r000&description=random+description+1
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde57", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.122657+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "release", "meta": {"revision": "r000"}, "name": "Release",
        "parentCollection": "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public":
        true, "size": 0, "updated": "2018-04-23T23:03:00.124264+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['614']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=Release1
  response:
    body: {string: 'null'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['4']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?name=Release1&app_revision=r001&description=random+description+2
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde58", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.191004+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        2", "lowerName": "release1", "meta": {"revision": "r001"}, "name": "Release1",
        "parentCollection": "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public":
        true, "size": 0, "updated": "2018-04-23T23:03:00.192666+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['616']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=draft
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde54", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.021000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "Uploaded each night,
        always up-to-date", "lowerName": "draft", "name": "draft", "parentCollection":
        "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public": true, "size":
        0, "updated": "2018-04-23T23:03:00.021000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['598']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=macosx&arch=amd64&baseName=ext1&app_revision=extR001&release_id=5ade6624bf0ca6ada13bde54&limit=50&sort=created&sortDir=-1
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=macosx&arch=amd64&baseName=ext1&repository_type=git&repository_url=git%40github.com%3Aext1.git&revision=r300&app_revision=extR001&packagetype=&codebase=&description=
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde5b", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.301964+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5a",
        "lowerName": "extr001_ext1_macosx_amd64_r300", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR001", "arch": "amd64", "baseName": "ext1", "codebase":
        "", "description": "", "os": "macosx", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext1.git", "revision": "r300"}, "name":
        "extR001_ext1_macosx_amd64_r300", "size": 0, "updated": "2018-04-23T23:03:00.303329+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['678']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1/item/5ade6624bf0ca6ada13bde5b/files
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file?parentType=item&parentId=5ade6624bf0ca6ada13bde5b&name=file1.txt&size=28&mimeType=application%2Foctet-stream
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde5c", "assetstoreId": "5a57cabaf99f330b58dc2228",
        "created": "2018-04-23T23:03:00.340279+00:00", "mimeType": "application/octet-stream",
        "name": "file1.txt", "parentId": "5ade6624bf0ca6ada13bde5b", "parentType":
        "item", "received": 0, "sha512state": "b''08c9bcf367e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000''",
        "size": 28, "tempFile": "/Users/pierre.assemat/assetstore/temp/tmpfey3ms1g",
        "updated": "2018-04-23T23:03:00.341382+00:00", "userId": "5ab5422344e48104c10bcc26"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['880']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1/describe
  response:
    body: {string: '{"basePath": "/api/v1", "definitions": {}, "host": "localhost:8080",
        "info": {"title": "Girder REST API", "version": "2.5.0"}, "paths": {"/api_key":
        {"get": {"description": "Only site administrators may list keys for other
        users. If no userId parameter is passed, lists keys for the current user.",
        "operationId": "api_key_listKeys", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "ID of the user whose keys to list.",
        "in": "query", "name": "userId", "required": false, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "name", "description": "Field to sort the result set by.",
        "in": "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}}, "summary": "List API
        keys for a given user.", "tags": ["api_key"]}, "post": {"operationId": "api_key_createKey",
        "parameters": [{"_lower": false, "_strip": true, "_upper": false, "default":
        "", "description": "Name for the API key.", "in": "query", "name": "name",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "JSON list of scopes for this key.", "in": "query",
        "name": "scope", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Max number of days tokens created
        with this key will last.", "in": "query", "name": "tokenDuration", "required":
        false, "type": "string"}, {"default": true, "description": "Whether the key
        is currently active.", "in": "query", "name": "active", "required": false,
        "type": "boolean"}], "responses": {"200": {"description": "Success"}, "400":
        {"description": "A parameter was invalid."}}, "summary": "Create a new API
        key.", "tags": ["api_key"]}}, "/api_key/token": {"post": {"operationId": "api_key_createToken",
        "parameters": [{"_lower": false, "_strip": true, "_upper": false, "description":
        "The API key.", "in": "query", "name": "key", "required": true, "type": "string"},
        {"description": "Number of days that the token should last.", "format": "float",
        "in": "query", "name": "duration", "required": false, "type": "number"}],
        "responses": {"200": {"description": "Success"}, "400": {"description": "A
        parameter was invalid."}}, "summary": "Create a token from an API key.", "tags":
        ["api_key"]}}, "/api_key/{id}": {"delete": {"operationId": "api_key_deleteKey",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the API key to delete.", "in": "path", "name": "id", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}}, "summary": "Delete an
        API key.", "tags": ["api_key"]}, "put": {"operationId": "api_key_updateKey",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the API key.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": true, "_upper": false, "description":
        "Name for the key.", "in": "query", "name": "name", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "default":
        [], "description": "JSON list of scopes for this key.", "in": "query", "name":
        "scope", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Max number of days tokens created
        with this key will last.", "in": "query", "name": "tokenDuration", "required":
        false, "type": "string"}, {"description": "Whether the key is currently active.",
        "in": "query", "name": "active", "required": false, "type": "boolean"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}}, "summary": "Update an API key.", "tags": ["api_key"]}}, "/app":
        {"get": {"operationId": "app_listApp", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the application.", "in":
        "query", "name": "app_id", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the collection.",
        "in": "query", "name": "collection_id", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The name
        of the application.", "in": "query", "name": "name", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Provide text search of the application.", "in": "query", "name": "text",
        "required": false, "type": "string"}, {"default": 50, "description": "Result
        set size limit.", "format": "int32", "in": "query", "name": "limit", "required":
        false, "type": "integer"}, {"default": 0, "description": "Offset into result
        set.", "format": "int32", "in": "query", "name": "offset", "required": false,
        "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false, "default":
        "name", "description": "Field to sort the result set by.", "in": "query",
        "name": "sort", "required": false, "type": "string"}, {"default": 1, "description":
        "Sort order: 1 for ascending, -1 for descending.", "enum": [1, -1], "format":
        "int32", "in": "query", "name": "sortdir", "required": false, "type": "integer"}],
        "responses": {"200": {"description": "Success", "schema": {"items": {"$ref":
        "#/definitions/Folder"}, "type": "array"}}, "400": {"description": "A parameter
        was invalid."}, "403": {"description": "Read permission denied on the application."}},
        "summary": "List existing application.", "tags": ["app"]}, "post": {"description":
        "If collectionId is missing or collectionName does not match an existing collection,
        a fresh new collection will be created with the \"collection_name\" given
        in parameters. By default the name \"Applications\" will be given to the collection.",
        "operationId": "app_initApp", "parameters": [{"_lower": false, "_strip": false,
        "_upper": false, "description": "The name of the application.", "in": "query",
        "name": "name", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Application description.", "in": "query",
        "name": "app_description", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the collection
        which contain the application", "in": "query", "name": "collection_id", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The Name of the collection which be created to contain the
        application", "in": "query", "name": "collection_name", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Collection description.", "in": "query", "name": "collection_description",
        "required": false, "type": "string"}, {"default": true, "description": "Whether
        the collection should be publicly visible.", "in": "query", "name": "public",
        "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Folder"}}, "403": {"description":
        "Write permission denied on the application."}}, "summary": "Create a new
        application.", "tags": ["app"]}}, "/app/{app_id}": {"delete": {"operationId":
        "app_deleteApp", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "app_id",
        "required": true, "type": "string"}, {"default": false, "description": "Whether
        to record progress on this task.", "in": "query", "name": "progress", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Admin access
        was denied for the application."}}, "summary": "Delete an Application by ID.",
        "tags": ["app"]}}, "/app/{app_id}/downloadstats": {"get": {"operationId":
        "app_getDownloadStats", "parameters": [{"_lower": false, "_strip": false,
        "_upper": false, "description": "The ID of the application.", "in": "path",
        "name": "app_id", "required": true, "type": "string"}], "responses": {"200":
        {"description": "Success"}, "400": {"description": "A parameter was invalid."}},
        "summary": "Get download stats of application and extensions packages within
        an application.", "tags": ["app"]}}, "/app/{app_id}/draft": {"get": {"operationId":
        "app_getAllDraftReleases", "parameters": [{"_lower": false, "_strip": false,
        "_upper": false, "description": "The application''s ID.", "in": "path", "name":
        "app_id", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The revision of a draft release",
        "in": "query", "name": "revision", "required": false, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "created", "description": "Field to sort the result set
        by.", "in": "query", "name": "sort", "required": false, "type": "string"},
        {"default": -1, "description": "Sort order: 1 for ascending, -1 for descending.",
        "enum": [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Folder"}}, "400": {"description": "ID was
        invalid."}, "403": {"description": "Read permission denied on the application."}},
        "summary": "Get all the draft releases from an application.", "tags": ["app"]}},
        "/app/{app_id}/extension": {"get": {"description": "If the \"release_id\"
        provided correspond to the \"draft\" release, then you must provide the app_revision
        to use this parameters. If not, it will just be ignored.", "operationId":
        "app_getExtensions", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the application.", "in": "path", "name":
        "app_id", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The name of the extension.", "in":
        "query", "name": "extension_name", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The release id.",
        "in": "query", "name": "release_id", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The extension
        id.", "in": "query", "name": "extension_id", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The target
        operating system of the package.", "enum": ["linux", "win", "macosx"], "in":
        "query", "name": "os", "required": false, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "The os chip architecture.",
        "enum": ["i386", "amd64"], "in": "query", "name": "arch", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The revision of the application.", "in": "query", "name": "app_revision",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The baseName of the extension", "in": "query", "name":
        "baseName", "required": false, "type": "string"}, {"default": 50, "description":
        "Result set size limit.", "format": "int32", "in": "query", "name": "limit",
        "required": false, "type": "integer"}, {"default": 0, "description": "Offset
        into result set.", "format": "int32", "in": "query", "name": "offset", "required":
        false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false,
        "default": "created", "description": "Field to sort the result set by.", "in":
        "query", "name": "sort", "required": false, "type": "string"}, {"default":
        -1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Extension"}}, "400": {"description": "A
        parameter was invalid."}}, "summary": "List or search available extensions.",
        "tags": ["app"]}, "post": {"operationId": "app_createOrUpdateExtension", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the App.", "in": "path", "name": "app_id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The target
        operating system of the package.", "enum": ["linux", "win", "macosx"], "in":
        "query", "name": "os", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "The os chip architecture.",
        "enum": ["i386", "amd64"], "in": "query", "name": "arch", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The baseName of the package (ie installer baseName).", "in": "query", "name":
        "baseName", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The type of the repository (svn, git).",
        "in": "query", "name": "repository_type", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The url
        of the repository.", "in": "query", "name": "repository_url", "required":
        true, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The svn or git revision of the extension.", "in": "query",
        "name": "revision", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "The revision of the application
        that the extension was built against.", "in": "query", "name": "app_revision",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Installer, data, etc.", "in": "query", "name": "packagetype",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The codebase baseName (Ex: Slicer4).", "in": "query",
        "name": "codebase", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "Text describing the extension.",
        "in": "query", "name": "description", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Release
        identifier (Ex: 0.0.1, 0.0.2, 0.1).", "in": "query", "name": "release", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The url of the icon for the extension.", "in": "query", "name":
        "icon_url", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Arbitrary description of the status
        of the extension (stable, active, etc).", "in": "query", "name": "development_status",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Category under which to place the extension. Subcategories
        should be delimited by character. If none is passed, will render under the
        Miscellaneous category..", "in": "query", "name": "category", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Boolean indicating if the extension should be automatically
        enabled after its installation.", "in": "query", "name": "enabled", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The url of the extension homepage.", "in": "query", "name":
        "homepage", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Space-separate list of URLs of screenshots
        for the extension.", "in": "query", "name": "screenshots", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "List of contributors of the extension.", "in": "query", "name": "contributors",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "List of the required extensions to use this one.",
        "in": "query", "name": "dependency", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The license
        short description of the extension.", "in": "query", "name": "license", "required":
        false, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}}, "summary": "Create or
        Update an extension package.", "tags": ["app"]}}, "/app/{app_id}/extension/{ext_id}":
        {"delete": {"operationId": "app_deleteExtension", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the App.",
        "in": "path", "name": "app_id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "ext_id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "ID was invalid."},
        "403": {"description": "Admin access was denied for the extension."}}, "summary":
        "Delete an Extension by ID.", "tags": ["app"]}}, "/app/{app_id}/package":
        {"get": {"description": "If the \"release_id\" provided correspond to the
        \"draft\" release, then you must provide the revision to use this parameters.
        If not, it will just be ignored.", "operationId": "app_getPackages", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the application.", "in": "path", "name": "app_id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The name of the package.", "in": "query", "name": "package_name", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The release id.", "in": "query", "name": "release_id", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The package id.", "in": "query", "name": "package_id", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The target operating system of the package.", "enum": ["linux",
        "win", "macosx"], "in": "query", "name": "os", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The os chip architecture.", "enum": ["i386", "amd64"], "in": "query", "name":
        "arch", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The revision of the application.",
        "in": "query", "name": "revision", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The baseName of the
        package", "in": "query", "name": "baseName", "required": false, "type": "string"},
        {"default": 50, "description": "Result set size limit.", "format": "int32",
        "in": "query", "name": "limit", "required": false, "type": "integer"}, {"default":
        0, "description": "Offset into result set.", "format": "int32", "in": "query",
        "name": "offset", "required": false, "type": "integer"}, {"_lower": false,
        "_strip": true, "_upper": false, "default": "created", "description": "Field
        to sort the result set by.", "in": "query", "name": "sort", "required": false,
        "type": "string"}, {"default": -1, "description": "Sort order: 1 for ascending,
        -1 for descending.", "enum": [1, -1], "format": "int32", "in": "query", "name":
        "sortdir", "required": false, "type": "integer"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Package"}}, "400": {"description":
        "A parameter was invalid."}}, "summary": "List or search available packages.",
        "tags": ["app"]}, "post": {"operationId": "app_createOrUpdatePackage", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the App.", "in": "path", "name": "app_id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The target
        operating system of the package.", "enum": ["linux", "win", "macosx"], "in":
        "query", "name": "os", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "The os chip architecture.",
        "enum": ["i386", "amd64"], "in": "query", "name": "arch", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The baseName of the package (ie installer baseName).", "in": "query", "name":
        "baseName", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The type of the repository (svn, git).",
        "in": "query", "name": "repository_type", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The url
        of the repository.", "in": "query", "name": "repository_url", "required":
        true, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The revision of the application", "in": "query", "name": "revision",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Text describing the package.", "in": "query", "name":
        "description", "required": false, "type": "string"}, {"description": "Boolean
        to specify if the package is ready to be distributed", "in": "query", "name":
        "pre_release", "required": false, "type": "boolean"}], "responses": {"200":
        {"description": "Success"}, "400": {"description": "A parameter was invalid."}},
        "summary": "Create or Update an application package.", "tags": ["app"]}},
        "/app/{app_id}/package/{pkg_id}": {"delete": {"operationId": "app_deletePackage",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the App.", "in": "path", "name": "app_id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "pkg_id", "required": true,
        "type": "string"}], "responses": {"200": {"description": "Success"}, "400":
        {"description": "ID was invalid."}, "403": {"description": "Admin access was
        denied for the package."}}, "summary": "Delete a Package by ID.", "tags":
        ["app"]}}, "/app/{app_id}/release": {"get": {"operationId": "app_getReleases",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The application''s ID.", "in": "path", "name": "app_id", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The release''s ID or name.", "in": "query", "name": "release_id_or_name",
        "required": false, "type": "string"}, {"default": 50, "description": "Result
        set size limit.", "format": "int32", "in": "query", "name": "limit", "required":
        false, "type": "integer"}, {"default": 0, "description": "Offset into result
        set.", "format": "int32", "in": "query", "name": "offset", "required": false,
        "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false, "default":
        "created", "description": "Field to sort the result set by.", "in": "query",
        "name": "sort", "required": false, "type": "string"}, {"default": -1, "description":
        "Sort order: 1 for ascending, -1 for descending.", "enum": [1, -1], "format":
        "int32", "in": "query", "name": "sortdir", "required": false, "type": "integer"}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read permission
        denied on the application."}}, "summary": "Get all the releases from an application.",
        "tags": ["app"]}, "post": {"description": "The application''s revision is
        stored as metadata of the new release.", "operationId": "app_createNewRelease",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The release''s name.", "in": "query", "name": "name", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The application''s ID which contain the release", "in": "path", "name": "app_id",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The application''s revision which correspond to the
        release", "in": "query", "name": "app_revision", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The application''s description.", "in": "query", "name": "description", "required":
        false, "type": "string"}, {"default": true, "description": "Whether the release
        should be publicly visible.", "in": "query", "name": "public", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Folder"}}, "400": {"description": "A parameter
        was invalid."}}, "summary": "Create a new release.", "tags": ["app"]}}, "/app/{app_id}/release/{release_id_or_name}":
        {"delete": {"operationId": "app_deleteReleaseByIdOrName", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "app_id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The release''s ID
        or name.", "in": "path", "name": "release_id_or_name", "required": true, "type":
        "string"}, {"default": false, "description": "Whether to record progress on
        this task.", "in": "query", "name": "progress", "required": false, "type":
        "boolean"}], "responses": {"200": {"description": "Success"}, "400": {"description":
        "ID was invalid."}, "403": {"description": "Admin access was denied for the
        release."}}, "summary": "Delete a release by ID or name.", "tags": ["app"]}},
        "/assetstore": {"get": {"operationId": "assetstore_find", "parameters": [{"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "name", "description": "Field to sort the result set by.",
        "in": "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}, "403": {"description":
        "You are not an administrator."}}, "summary": "List assetstores.", "tags":
        ["assetstore"]}, "post": {"description": "You must be an administrator to
        call this.", "operationId": "assetstore_createAssetstore", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "Unique name for the
        assetstore.", "in": "query", "name": "name", "required": true, "type": "string"},
        {"description": "Type of the assetstore.", "format": "int32", "in": "query",
        "name": "type", "required": true, "type": "integer"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Root path on disk (for filesystem
        type).", "in": "query", "name": "root", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "File creation
        permissions (for filesystem type).", "in": "query", "name": "perms", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Database name (for GridFS type)", "in": "query", "name": "db",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Mongo host URI (for GridFS type)", "in": "query", "name":
        "mongohost", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Replica set name (for GridFS type)",
        "in": "query", "name": "replicaset", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Shard
        the collection (for GridFS type).  Set to \"auto\" to set up sharding.", "in":
        "query", "name": "shard", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The S3 bucket to
        store data in (for S3 type).", "in": "query", "name": "bucket", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "default": "", "description": "Optional path prefix within the bucket under
        which files will be stored (for S3 type).", "in": "query", "name": "prefix",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The AWS access key ID to use for authentication (for
        S3 type).", "in": "query", "name": "accessKeyId", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The AWS secret key to use for authentication (for S3 type).", "in": "query",
        "name": "secret", "required": false, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "default": "", "description": "The S3 service
        host (for S3 type).  Default is s3.amazonaws.com.  This can be used to specify
        a protocol and port as well using the form [http[s]://](host domain)[:(port)].
        Do not include the bucket name here.", "in": "query", "name": "service", "required":
        false, "type": "string"}, {"default": false, "description": "If this assetstore
        is read-only, set this to true.", "in": "query", "name": "readOnly", "required":
        false, "type": "boolean"}, {"_lower": false, "_strip": false, "_upper": false,
        "default": "us-east-1", "description": "The AWS region to which the S3 bucket
        belongs.", "in": "query", "name": "region", "required": false, "type": "string"},
        {"description": "The credentials for connecting to S3 will be inferred by
        Boto rather than explicitly passed. Inferring credentials will ignore accessKeyId
        and secret.", "in": "query", "name": "inferCredentials", "required": false,
        "type": "boolean"}], "responses": {"200": {"description": "Success", "schema":
        {"$ref": "#/definitions/Assetstore"}}, "400": {"description": "A parameter
        was invalid."}, "403": {"description": "You are not an administrator."}},
        "summary": "Create a new assetstore.", "tags": ["assetstore"]}}, "/assetstore/{id}":
        {"delete": {"description": "This will fail if there are any files in the assetstore.",
        "operationId": "assetstore_deleteAssetstore", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid.\n\nThe assetstore is not empty."}, "403": {"description": "You are
        not an administrator."}}, "summary": "Delete an assetstore.", "tags": ["assetstore"]},
        "get": {"operationId": "assetstore_getAssetstore", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "You are not an administrator."}}, "summary":
        "Get information about an assetstore.", "tags": ["assetstore"]}, "put": {"operationId":
        "assetstore_updateAssetstore", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the document.", "in": "path",
        "name": "id", "required": true, "type": "string"}, {"_lower": false, "_strip":
        true, "_upper": false, "description": "Unique name for the assetstore.", "in":
        "query", "name": "name", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "Root path on disk (for Filesystem
        type)", "in": "query", "name": "root", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "File creation
        permissions (for Filesystem type)", "in": "query", "name": "perms", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Database name (for GridFS type)", "in": "query", "name": "db",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Mongo host URI (for GridFS type)", "in": "query", "name":
        "mongohost", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Replica set name (for GridFS type)",
        "in": "query", "name": "replicaset", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Shard
        the collection (for GridFS type).  Set to \"auto\" to set up sharding.", "in":
        "query", "name": "shard", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The S3 bucket to
        store data in (for S3 type).", "in": "query", "name": "bucket", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "default": "", "description": "Optional path prefix within the bucket under
        which files will be stored (for S3 type).", "in": "query", "name": "prefix",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The AWS access key ID to use for authentication (for
        S3 type).", "in": "query", "name": "accessKeyId", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The AWS secret key to use for authentication (for S3 type).", "in": "query",
        "name": "secret", "required": false, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "default": "", "description": "The S3 service
        host (for S3 type).  Default is s3.amazonaws.com.  This can be used to specify
        a protocol and port as well using the form [http[s]://](host domain)[:(port)].
        Do not include the bucket name here.", "in": "query", "name": "service", "required":
        false, "type": "string"}, {"description": "If this assetstore is read-only,
        set this to true.", "in": "query", "name": "readOnly", "required": false,
        "type": "boolean"}, {"_lower": false, "_strip": false, "_upper": false, "default":
        "us-east-1", "description": "The AWS region to which the S3 bucket belongs.",
        "in": "query", "name": "region", "required": false, "type": "string"}, {"description":
        "Whether this is the current assetstore", "in": "query", "name": "current",
        "required": true, "type": "boolean"}, {"description": "The credentials for
        connecting to S3 will be inferred by Boto rather than explicitly passed. Inferring
        credentials will ignore accessKeyId and secret.", "in": "query", "name": "inferCredentials",
        "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Assetstore"}}, "400": {"description":
        "A parameter was invalid."}, "403": {"description": "You are not an administrator."}},
        "summary": "Update an existing assetstore.", "tags": ["assetstore"]}}, "/assetstore/{id}/files":
        {"get": {"operationId": "assetstore_getAssetstoreFiles", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "_id", "description": "Field to sort the result set by.",
        "in": "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}, "403": {"description":
        "You are not an administrator."}}, "summary": "Get a list of files controlled
        by an assetstore.", "tags": ["assetstore"]}}, "/assetstore/{id}/import": {"post":
        {"description": "This does not move or copy the existing data, it just creates
        references to it in the Girder data hierarchy. Deleting those references will
        not delete the underlying data. This operation is currently only supported
        for S3 assetstores.", "operationId": "assetstore_importData", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Root path
        within the underlying storage system to import.", "in": "query", "name": "importPath",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "ID of a folder, collection, or user in Girder under
        which the data will be imported.", "in": "query", "name": "destinationId",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Type of the destination resource.", "enum": ["folder",
        "collection", "user"], "in": "query", "name": "destinationType", "required":
        true, "type": "string"}, {"default": false, "description": "Whether to record
        progress on the import.", "in": "query", "name": "progress", "required": false,
        "type": "boolean"}, {"default": false, "description": "Whether folders containing
        only files should be imported as items.", "in": "query", "name": "leafFoldersAsItems",
        "required": false, "type": "boolean"}, {"_lower": false, "_strip": false,
        "_upper": false, "description": "If set, only filenames matching this regular
        expression will be imported.", "in": "query", "name": "fileIncludeRegex",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "If set, only filenames that do not match this regular
        expression will be imported. If a file matches both the include and exclude
        regex, it will be excluded.", "in": "query", "name": "fileExcludeRegex", "required":
        false, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}, "403": {"description":
        "You are not an administrator."}}, "summary": "Import existing data into an
        assetstore.", "tags": ["assetstore"]}}, "/collection": {"get": {"operationId":
        "collection_find", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "Pass this to perform a text search for collections.",
        "in": "query", "name": "text", "required": false, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "name", "description": "Field to sort the result set by.",
        "in": "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"items": {"$ref": "#/definitions/Collection"}, "type": "array"}}},
        "summary": "List or search for collections.", "tags": ["collection"]}, "post":
        {"operationId": "collection_createCollection", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "Name for the collection.
        Must be unique.", "in": "query", "name": "name", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Collection description.", "in": "query", "name": "description", "required":
        false, "type": "string"}, {"default": false, "description": "Whether the collection
        should be publicly visible.", "in": "query", "name": "public", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Collection"}}, "400": {"description": "A
        parameter was invalid."}, "403": {"description": "You are not authorized to
        create collections."}}, "summary": "Create a new collection.", "tags": ["collection"]}},
        "/collection/{id}": {"delete": {"operationId": "collection_deleteCollection",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success"}, "400": {"description":
        "ID was invalid."}, "403": {"description": "Admin permission denied on the
        collection."}}, "summary": "Delete a collection by ID.", "tags": ["collection"]},
        "get": {"operationId": "collection_getCollection", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Collection"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read permission
        denied on the collection."}}, "summary": "Get a collection by ID.", "tags":
        ["collection"]}, "put": {"operationId": "collection_updateCollection", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": true, "_upper": false, "description": "Unique
        name for the collection.", "in": "query", "name": "name", "required": false,
        "type": "string"}, {"_lower": false, "_strip": true, "_upper": false, "description":
        "Collection description.", "in": "query", "name": "description", "required":
        false, "type": "string"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Collection"}}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Write permission denied on the collection."}},
        "summary": "Edit a collection by ID.", "tags": ["collection"]}}, "/collection/{id}/access":
        {"get": {"operationId": "collection_getCollectionAccess", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "ID was invalid."},
        "403": {"description": "Admin permission denied on the collection."}}, "summary":
        "Get the access control list for a collection.", "tags": ["collection"]},
        "put": {"operationId": "collection_updateCollectionAccess", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The access
        control list as JSON.", "in": "query", "name": "access", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "List of public access flags to set on the collection.", "in": "query", "name":
        "publicFlags", "required": false, "type": "string"}, {"description": "Whether
        the collection should be publicly visible.", "in": "query", "name": "public",
        "required": false, "type": "boolean"}, {"default": false, "description": "Whether
        the policies should be applied to all folders under this collection as well.",
        "in": "query", "name": "recurse", "required": false, "type": "boolean"}, {"default":
        false, "description": "If recurse is set to True, this controls whether progress
        notifications will be sent.", "in": "query", "name": "progress", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Admin permission
        denied on the collection."}}, "summary": "Set the access control list for
        a collection.", "tags": ["collection"]}}, "/collection/{id}/details": {"get":
        {"operationId": "collection_getCollectionDetails", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "Read access was denied on the collection."}},
        "summary": "Get detailed information about a collection.", "tags": ["collection"]}},
        "/collection/{id}/download": {"get": {"operationId": "collection_downloadCollection",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "JSON list of MIME types to include.", "in": "query", "name": "mimeFilter",
        "required": false, "type": "string"}], "produces": ["application/octet-stream"],
        "responses": {"200": {"description": "Success"}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Read access was denied for the collection."}},
        "summary": "Download an entire collection as a zip archive.", "tags": ["collection"]}},
        "/file": {"post": {"description": "Use POST /file/chunk to send the contents
        of the file.  The data for the first chunk of the file can be included with
        this query by sending it as the body of the request using an appropriate content-type
        and with the other parameters as part of the query string.  If the entire
        file is uploaded via this call, the resulting file is returned.", "operationId":
        "file_initUpload", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "Type being uploaded into.", "enum": ["folder", "item"],
        "in": "query", "name": "parentType", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the parent.", "in": "query", "name": "parentId", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Name of the file being created.", "in": "query", "name": "name", "required":
        true, "type": "string"}, {"description": "Size in bytes of the file.", "format":
        "int32", "in": "query", "name": "size", "required": false, "type": "integer"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The MIME
        type of the file.", "in": "query", "name": "mimeType", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "If this is a link file, pass its URL instead of size and mimeType using this
        parameter.", "in": "query", "name": "linkUrl", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "If included, this information is passed to the data.process event when the
        upload is complete.", "in": "query", "name": "reference", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Direct the upload to a specific assetstore (admin-only).", "in": "query",
        "name": "assetstoreId", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Upload"}},
        "400": {"description": "A parameter was invalid."}, "403": {"description":
        "Write access was denied on the parent folder."}, "500": {"description": "Failed
        to create upload."}}, "summary": "Start a new upload or create an empty or
        link file.", "tags": ["file"]}}, "/file/chunk": {"post": {"description": "The
        data for the chunk should be sent as the body of the request using an appropriate
        content-type and with the other parameters as part of the query string.  Alternately,
        the data can be sent as a file in the \"chunk\" field in multipart form data.  Multipart
        uploads are much less efficient and their use is deprecated.", "operationId":
        "file_readChunk", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "formData", "name":
        "uploadId", "required": true, "type": "string"}, {"description": "Offset of
        the chunk in the file.", "format": "int32", "in": "formData", "name": "offset",
        "required": true, "type": "integer"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid.\n\nReceived too many bytes.\n\nChunk
        is smaller than the minimum size."}, "403": {"description": "You are not the
        user who initiated the upload."}, "500": {"description": "Failed to store
        upload."}}, "summary": "Upload a chunk of a file.", "tags": ["file"]}}, "/file/completion":
        {"post": {"description": "This is only required in certain non-standard upload
        behaviors. Clients should know which behavior models require the finalize
        step to be called in their behavior handlers.", "operationId": "file_finalizeUpload",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "formData", "name": "uploadId", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid.\n\nThe upload does not require finalization.\n\nNot
        enough bytes have been uploaded."}, "403": {"description": "You are not the
        user who initiated the upload."}}, "summary": "Finalize an upload explicitly
        if necessary.", "tags": ["file"]}}, "/file/offset": {"get": {"operationId":
        "file_requestOffset", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "formData", "name":
        "uploadId", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "The ID was invalid, or the offset did
        not match the server''s record."}}, "summary": "Request required offset before
        resuming an upload.", "tags": ["file"]}}, "/file/upload/{id}": {"delete":
        {"operationId": "file_cancelUpload", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the document.", "in": "path",
        "name": "id", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "You lack permission to cancel this upload."}}, "summary": "Cancel a partially
        completed upload.", "tags": ["file"]}}, "/file/{id}": {"delete": {"operationId":
        "file_deleteFile", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Write access was denied on the parent folder."}}, "summary": "Delete a file
        by ID.", "tags": ["file"]}, "get": {"operationId": "file_getFile", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "400": {"description": "A
        parameter was invalid."}, "403": {"description": "Read access was denied on
        the file."}}, "summary": "Get a file''s information.", "tags": ["file"]},
        "put": {"operationId": "file_updateFile", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": true, "_upper": false, "description": "The name to set on
        the file.", "in": "query", "name": "name", "required": false, "type": "string"},
        {"_lower": false, "_strip": true, "_upper": false, "description": "The MIME
        type of the file.", "in": "query", "name": "mimeType", "required": false,
        "type": "string"}], "responses": {"200": {"description": "Success"}, "400":
        {"description": "ID was invalid."}, "403": {"description": "Write access was
        denied on the parent folder."}}, "summary": "Change file metadata such as
        name or MIME type.", "tags": ["file"]}}, "/file/{id}/contents": {"put": {"description":
        "After calling this, send the chunks just like you would with a normal file
        upload.", "operationId": "file_updateFileContents", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"description":
        "Size in bytes of the new file.", "format": "int32", "in": "query", "name":
        "size", "required": true, "type": "integer"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "If included, this information is passed
        to the data.process event when the upload is complete.", "in": "query", "name":
        "reference", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Direct the upload to a specific assetstore
        (admin-only).", "in": "query", "name": "assetstoreId", "required": false,
        "type": "string"}], "responses": {"200": {"description": "Success"}}, "summary":
        "Change the contents of an existing file.", "tags": ["file"]}}, "/file/{id}/copy":
        {"post": {"operationId": "file_copy", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the document.", "in": "path",
        "name": "id", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the item to copy the file
        to.", "in": "formData", "name": "itemId", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}}, "summary": "Copy a file.",
        "tags": ["file"]}}, "/file/{id}/download": {"get": {"description": "This endpoint
        also accepts the HTTP \"Range\" header for partial file downloads.", "operationId":
        "file_download", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}, {"default": 0, "description": "Start
        downloading at this offset in bytes within the file.", "format": "int32",
        "in": "query", "name": "offset", "required": false, "type": "integer"}, {"description":
        "If you only wish to download part of the file, pass this as the index of
        the last byte to download. Unlike the HTTP Range header, the endByte parameter
        is non-inclusive, so you should set it to the index of the byte one past the
        final byte you wish to receive.", "format": "int32", "in": "query", "name":
        "endByte", "required": false, "type": "integer"}, {"_lower": false, "_strip":
        false, "_upper": false, "default": "attachment", "description": "Specify the
        Content-Disposition response header disposition-type value.", "enum": ["inline",
        "attachment"], "in": "query", "name": "contentDisposition", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Arbitrary data to send along with the download request.", "in": "query",
        "name": "extraParameters", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "ID was invalid."},
        "403": {"description": "Read access was denied on the parent folder."}}, "summary":
        "Download a file.", "tags": ["file"]}}, "/file/{id}/download/{name}": {"get":
        {"description": "The name parameter doesn''t alter the download.  Some download
        clients save files based on the last part of a path, and specifying the name
        satisfies those clients.", "operationId": "file_downloadWithName", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the file.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The name
        of the file.  This is ignored.", "in": "path", "name": "name", "required":
        true, "type": "string"}, {"description": "Start downloading at this offset
        in bytes within the file.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Read access was denied on the parent folder."}}, "summary": "Download a file.",
        "tags": ["file"]}}, "/file/{id}/move": {"put": {"operationId": "file_moveFileToAssetstore",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The destination assetstore.", "in": "formData", "name": "assetstoreId", "required":
        true, "type": "string"}, {"default": false, "description": "Controls whether
        progress notifications will be sent.", "in": "query", "name": "progress",
        "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success"}}, "summary": "Move a file to a different assetstore.", "tags":
        ["file"]}}, "/folder": {"get": {"description": "You must pass either a \"folderId\"
        or \"text\" fieldto specify how you are searching for folders.  If you omit
        one of these parameters the request will fail and respond : \"Invalid search
        mode.\"", "operationId": "folder_find", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "Type of the folder''s parent", "enum":
        ["folder", "user", "collection"], "in": "query", "name": "parentType", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The ID of the folder''s parent.", "in": "query", "name": "parentId",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Pass to perform a text search.", "in": "query", "name":
        "text", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Pass to lookup a folder by exact name
        match. Must pass parentType and parentId as well when using this.", "in":
        "query", "name": "name", "required": false, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "lowerName", "description": "Field to sort the result set
        by.", "in": "query", "name": "sort", "required": false, "type": "string"},
        {"default": 1, "description": "Sort order: 1 for ascending, -1 for descending.",
        "enum": [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"items": {"$ref": "#/definitions/Folder"}, "type": "array"}}, "400":
        {"description": "A parameter was invalid."}, "403": {"description": "Read
        access was denied on the parent resource."}}, "summary": "Search for folders
        by certain properties.", "tags": ["folder"]}, "post": {"operationId": "folder_createFolder",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "default":
        "folder", "description": "Type of the folder''s parent", "enum": ["folder",
        "user", "collection"], "in": "query", "name": "parentType", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the folder''s parent.", "in": "query", "name": "parentId", "required":
        true, "type": "string"}, {"_lower": false, "_strip": true, "_upper": false,
        "description": "Name of the folder.", "in": "query", "name": "name", "required":
        true, "type": "string"}, {"_lower": false, "_strip": true, "_upper": false,
        "default": "", "description": "Description for the folder.", "in": "query",
        "name": "description", "required": false, "type": "string"}, {"default": false,
        "description": "Return existing folder if it exists rather than creating a
        new one.", "in": "query", "name": "reuseExisting", "required": false, "type":
        "boolean"}, {"description": "Whether the folder should be publicly visible.
        By default, inherits the value from parent folder, or in the case of user
        or collection parentType, defaults to False.", "in": "query", "name": "public",
        "required": false, "type": "boolean"}, {"_lower": false, "_strip": false,
        "_upper": false, "description": "A JSON object containing the metadata keys
        to add", "in": "formData", "name": "metadata", "required": false, "type":
        "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref":
        "#/definitions/Folder"}}, "400": {"description": "A parameter was invalid."},
        "403": {"description": "Write access was denied on the parent"}}, "summary":
        "Create a new folder.", "tags": ["folder"]}}, "/folder/{id}": {"delete": {"operationId":
        "folder_deleteFolder", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}, {"default": false, "description": "Whether
        to record progress on this task.", "in": "query", "name": "progress", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Admin access
        was denied for the folder."}}, "summary": "Delete a folder by ID.", "tags":
        ["folder"]}, "get": {"operationId": "folder_getFolder", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the folder."}}, "summary": "Get a folder by ID.", "tags": ["folder"]},
        "put": {"operationId": "folder_updateFolder", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": true, "_upper": false, "description": "Name of the folder.",
        "in": "query", "name": "name", "required": false, "type": "string"}, {"_lower":
        false, "_strip": true, "_upper": false, "description": "Description for the
        folder.", "in": "query", "name": "description", "required": false, "type":
        "string"}, {"_lower": false, "_strip": true, "_upper": false, "description":
        "Type of the folder''s parent", "enum": ["folder", "user", "collection"],
        "in": "query", "name": "parentType", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Parent
        ID for the new parent of this folder.", "in": "query", "name": "parentId",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "A JSON object containing the metadata keys to add",
        "in": "formData", "name": "metadata", "required": false, "type": "string"}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Write access
        was denied for the folder or its new parent object."}}, "summary": "Update
        a folder or move it into a new parent.", "tags": ["folder"]}}, "/folder/{id}/access":
        {"get": {"operationId": "folder_getFolderAccess", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Admin access
        was denied for the folder."}}, "summary": "Get the access control list for
        a folder.", "tags": ["folder"]}, "put": {"operationId": "folder_updateFolderAccess",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The JSON-encoded access control list.", "in": "query", "name": "access",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "JSON list of public access flags.", "in": "query",
        "name": "publicFlags", "required": false, "type": "string"}, {"description":
        "Whether the folder should be publicly visible.", "in": "query", "name": "public",
        "required": false, "type": "boolean"}, {"default": false, "description": "Whether
        the policies should be applied to all subfolders under this folder as well.",
        "in": "query", "name": "recurse", "required": false, "type": "boolean"}, {"default":
        false, "description": "If recurse is set to True, this controls whether progress
        notifications will be sent.", "in": "query", "name": "progress", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Admin access
        was denied for the folder."}}, "summary": "Update the access control list
        for a folder.", "tags": ["folder"]}}, "/folder/{id}/contents": {"delete":
        {"description": "Cleans out all the items and subfolders from under a folder,
        but does not remove the folder itself.", "operationId": "folder_deleteContents",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the folder to clean.", "in": "path", "name": "id", "required":
        true, "type": "string"}, {"default": false, "description": "Whether to record
        progress on this task.", "in": "query", "name": "progress", "required": false,
        "type": "boolean"}], "responses": {"200": {"description": "Success"}, "400":
        {"description": "ID was invalid."}, "403": {"description": "Write access was
        denied on the folder."}}, "summary": "Remove all contents from a folder.",
        "tags": ["folder"]}}, "/folder/{id}/copy": {"post": {"operationId": "folder_copyFolder",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the original folder.", "in": "path", "name": "id", "required":
        true, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Type of the new folder''s parent", "enum": ["folder", "user",
        "collection"], "in": "query", "name": "parentType", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the parent document.", "in": "query", "name": "parentId", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Name for the new folder.", "in": "query", "name": "name",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Description for the new folder.", "in": "query", "name":
        "description", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Whether the folder should be publicly
        visible. By default, inherits the value from parent folder, or in the case
        of user or collection parentType, defaults to False. If ''original'', use
        the value of the original folder.", "enum": ["true", "false", "original"],
        "in": "query", "name": "public", "required": false, "type": "string"}, {"default":
        false, "description": "Whether to record progress on this task.", "in": "query",
        "name": "progress", "required": false, "type": "boolean"}], "responses": {"200":
        {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}}, "400":
        {"description": "A parameter was invalid.\n\nID was invalid."}, "403": {"description":
        "Read access was denied on the original folder.\n\nWrite access was denied
        on the parent."}}, "summary": "Copy a folder.", "tags": ["folder"]}}, "/folder/{id}/details":
        {"get": {"operationId": "folder_getFolderDetails", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "Read access was denied on the folder."}},
        "summary": "Get detailed information about a folder.", "tags": ["folder"]}},
        "/folder/{id}/download": {"get": {"operationId": "folder_downloadFolder",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "JSON list of MIME types to include.", "in": "query", "name": "mimeFilter",
        "required": false, "type": "string"}], "produces": ["application/octet-stream"],
        "responses": {"200": {"description": "Success"}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Read access was denied for the folder."}},
        "summary": "Download an entire folder as a zip archive.", "tags": ["folder"]}},
        "/folder/{id}/metadata": {"delete": {"operationId": "folder_deleteMetadata",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "A JSON list containing the metadata fields to delete", "in": "body", "name":
        "fields", "required": true, "schema": {"$ref": "#/definitions/string"}}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid.\n\nInvalid JSON passed in request
        body.\n\nMetadata key name was invalid."}, "403": {"description": "Write access
        was denied for the folder."}}, "summary": "Delete metadata fields on a folder.",
        "tags": ["folder"]}, "put": {"description": "Set metadata fields to null in
        order to delete them.", "operationId": "folder_setMetadata", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "A JSON
        object containing the metadata keys to add", "in": "body", "name": "metadata",
        "required": true, "schema": {"$ref": "#/definitions/string"}}, {"default":
        false, "description": "Whether \"null\" is allowed as a metadata value.",
        "in": "query", "name": "allowNull", "required": false, "type": "boolean"}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Folder"}},
        "400": {"description": "ID was invalid.\n\nInvalid JSON passed in request
        body.\n\nMetadata key name was invalid."}, "403": {"description": "Write access
        was denied for the folder."}}, "summary": "Set metadata fields on an folder.",
        "tags": ["folder"]}}, "/folder/{id}/rootpath": {"get": {"operationId": "folder_rootpath",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success"}, "400": {"description":
        "ID was invalid."}, "403": {"description": "Read access was denied for the
        folder."}}, "summary": "Get the path to the root of the folder''s hierarchy.",
        "tags": ["folder"]}}, "/group": {"get": {"operationId": "group_find", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "Pass
        this to perform a full-text search for groups.", "in": "query", "name": "text",
        "required": false, "type": "string"}, {"default": false, "description": "If
        true, only return exact name matches. This is case sensitive.", "in": "query",
        "name": "exact", "required": false, "type": "boolean"}, {"default": 50, "description":
        "Result set size limit.", "format": "int32", "in": "query", "name": "limit",
        "required": false, "type": "integer"}, {"default": 0, "description": "Offset
        into result set.", "format": "int32", "in": "query", "name": "offset", "required":
        false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false,
        "default": "name", "description": "Field to sort the result set by.", "in":
        "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "A parameter was invalid."}}, "summary": "Search for
        groups or list all groups.", "tags": ["group"]}, "post": {"description": "Must
        be logged in.", "operationId": "group_createGroup", "parameters": [{"_lower":
        false, "_strip": true, "_upper": false, "description": "Unique name for the
        group.", "in": "query", "name": "name", "required": true, "type": "string"},
        {"_lower": false, "_strip": true, "_upper": false, "default": "", "description":
        "Description of the group.", "in": "query", "name": "description", "required":
        false, "type": "string"}, {"default": false, "description": "Whether the group
        should be publicly visible.", "in": "query", "name": "public", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Group"}}, "400": {"description": "A parameter
        was invalid."}, "403": {"description": "Write access was denied on the parent"}},
        "summary": "Create a new group.", "tags": ["group"]}}, "/group/{id}": {"delete":
        {"operationId": "group_deleteGroup", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the document.", "in": "path",
        "name": "id", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Admin access was denied for the group."}}, "summary": "Delete a group by
        ID.", "tags": ["group"]}, "get": {"operationId": "group_getGroup", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Group"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the group."}}, "summary": "Get a group by ID.", "tags": ["group"]},
        "put": {"operationId": "group_updateGroup", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": true, "_upper": false, "description": "The name to set on
        the group.", "in": "query", "name": "name", "required": false, "type": "string"},
        {"_lower": false, "_strip": true, "_upper": false, "description": "Description
        for the group.", "in": "query", "name": "description", "required": false,
        "type": "string"}, {"description": "Whether the group should be publicly visible",
        "in": "query", "name": "public", "required": false, "type": "boolean"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Can admins or moderators
        directly add members to this group?  Only system administrators are allowed
        to set this field", "enum": ["default", "no", "yesmod", "yesadmin"], "in":
        "query", "name": "addAllowed", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "Write access was denied for the group."}},
        "summary": "Update a group by ID.", "tags": ["group"]}}, "/group/{id}/access":
        {"get": {"operationId": "group_getGroupAccess", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Group"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the group."}}, "summary": "Get the access control list for
        a group.", "tags": ["group"]}}, "/group/{id}/admin": {"delete": {"operationId":
        "group_demote", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the user to demote.", "in": "formData", "name":
        "userId", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Group"}}, "400": {"description":
        "A parameter was invalid."}, "403": {"description": "You don''t have permission
        to demote users."}}, "summary": "Demote a user to a normal group member.",
        "tags": ["group"]}, "post": {"operationId": "group_promoteToAdmin", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the user to promote.", "in": "formData", "name": "userId", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Group"}}, "400": {"description": "ID was
        invalid."}, "403": {"description": "You don''t have permission to promote
        users."}}, "summary": "Promote a member to be an administrator of the group.",
        "tags": ["group"]}}, "/group/{id}/invitation": {"get": {"operationId": "group_getGroupInvitations",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"default": 50, "description": "Result set size limit.", "format":
        "int32", "in": "query", "name": "limit", "required": false, "type": "integer"},
        {"default": 0, "description": "Offset into result set.", "format": "int32",
        "in": "query", "name": "offset", "required": false, "type": "integer"}, {"_lower":
        false, "_strip": true, "_upper": false, "default": "lastName", "description":
        "Field to sort the result set by.", "in": "query", "name": "sort", "required":
        false, "type": "string"}, {"default": 1, "description": "Sort order: 1 for
        ascending, -1 for descending.", "enum": [1, -1], "format": "int32", "in":
        "query", "name": "sortdir", "required": false, "type": "integer"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Group"}},
        "400": {"description": "A parameter was invalid."}, "403": {"description":
        "Read access was denied for the group."}}, "summary": "Show outstanding invitations
        for a group.", "tags": ["group"]}, "post": {"description": "The \"force\"
        option to this endpoint is only available to administrators and can be used
        to bypass the invitation process and instead add the user directly to the
        group.", "operationId": "group_inviteToGroup", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the user
        to invite or accept.", "in": "formData", "name": "userId", "required": true,
        "type": "string"}, {"default": 0, "description": "The access level the user
        will be given when they accept the invitation.", "format": "int32", "in":
        "query", "name": "level", "required": false, "type": "integer"}, {"default":
        false, "description": "If you do not want this action to send an email to
        the target user, set this to true.", "in": "query", "name": "quiet", "required":
        false, "type": "boolean"}, {"default": false, "description": "Add user directly
        rather than sending an invitation (admin-only option).", "in": "query", "name":
        "force", "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Group"}}, "400": {"description":
        "A parameter was invalid."}, "403": {"description": "Write access was denied
        for the group."}}, "summary": "Invite a user to join a group, or accept a
        user''s request to join.", "tags": ["group"]}}, "/group/{id}/member": {"delete":
        {"description": "If the specified user is not yet a member of the group, this
        will delete any outstanding invitation or membership request for the user.
        Passing no userId parameter will assume that the current user is removing
        themself.", "operationId": "group_removeFromGroup", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the user
        to remove. If not passed, will remove yourself from the group.", "in": "formData",
        "name": "userId", "required": false, "type": "string"}], "responses": {"200":
        {"description": "Success", "schema": {"$ref": "#/definitions/Group"}}, "400":
        {"description": "A parameter was invalid."}, "403": {"description": "You don''t
        have permission to remove that user."}}, "summary": "Remove a user from a
        group, or uninvite them.", "tags": ["group"]}, "get": {"operationId": "group_listMembers",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"default": 50, "description": "Result set size limit.", "format":
        "int32", "in": "query", "name": "limit", "required": false, "type": "integer"},
        {"default": 0, "description": "Offset into result set.", "format": "int32",
        "in": "query", "name": "offset", "required": false, "type": "integer"}, {"_lower":
        false, "_strip": true, "_upper": false, "default": "lastName", "description":
        "Field to sort the result set by.", "in": "query", "name": "sort", "required":
        false, "type": "string"}, {"default": 1, "description": "Sort order: 1 for
        ascending, -1 for descending.", "enum": [1, -1], "format": "int32", "in":
        "query", "name": "sortdir", "required": false, "type": "integer"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "ID was invalid."},
        "403": {"description": "Read access was denied for the group."}}, "summary":
        "List members of a group.", "tags": ["group"]}, "post": {"operationId": "group_joinGroup",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref":
        "#/definitions/Group"}}, "400": {"description": "ID was invalid."}, "403":
        {"description": "You were not invited to this group, or do not have read access
        to it."}}, "summary": "Request to join a group, or accept an invitation to
        join.", "tags": ["group"]}}, "/group/{id}/moderator": {"delete": {"operationId":
        "group_demote", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the user to demote.", "in": "formData", "name":
        "userId", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Group"}}, "400": {"description":
        "A parameter was invalid."}, "403": {"description": "You don''t have permission
        to demote users."}}, "summary": "Demote a user to a normal group member.",
        "tags": ["group"]}, "post": {"operationId": "group_promoteToModerator", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the user to promote.", "in": "formData", "name": "userId", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Group"}}, "400": {"description": "ID was
        invalid."}, "403": {"description": "You don''t have permission to promote
        users."}}, "summary": "Promote a member to be a moderator of the group.",
        "tags": ["group"]}}, "/item": {"get": {"description": "You must pass either
        a \"itemId\" or \"text\" fieldto specify how you are searching for items.  If
        you omit one of these parameters the request will fail and respond : \"Invalid
        search mode.\"", "operationId": "item_find", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "Pass this to list all items
        in a folder.", "in": "query", "name": "folderId", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Pass this to perform a full text search for items.", "in": "query", "name":
        "text", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "Pass to lookup an item by exact name
        match. Must pass folderId as well when using this.", "in": "query", "name":
        "name", "required": false, "type": "string"}, {"default": 50, "description":
        "Result set size limit.", "format": "int32", "in": "query", "name": "limit",
        "required": false, "type": "integer"}, {"default": 0, "description": "Offset
        into result set.", "format": "int32", "in": "query", "name": "offset", "required":
        false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false,
        "default": "lowerName", "description": "Field to sort the result set by.",
        "in": "query", "name": "sort", "required": false, "type": "string"}, {"default":
        1, "description": "Sort order: 1 for ascending, -1 for descending.", "enum":
        [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"items": {"$ref": "#/definitions/Item"}, "type": "array"}}, "400":
        {"description": "A parameter was invalid."}, "403": {"description": "Read
        access was denied on the parent folder."}}, "summary": "List or search for
        items.", "tags": ["item"]}, "post": {"operationId": "item_createItem", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the parent folder.", "in": "query", "name": "folderId", "required": true,
        "type": "string"}, {"_lower": false, "_strip": true, "_upper": false, "description":
        "Name for the item.", "in": "query", "name": "name", "required": true, "type":
        "string"}, {"_lower": false, "_strip": true, "_upper": false, "default": "",
        "description": "Description for the item.", "in": "query", "name": "description",
        "required": false, "type": "string"}, {"default": false, "description": "Return
        existing item (by name) if it exists.", "in": "query", "name": "reuseExisting",
        "required": false, "type": "boolean"}, {"_lower": false, "_strip": false,
        "_upper": false, "description": "A JSON object containing the metadata keys
        to add", "in": "formData", "name": "metadata", "required": false, "type":
        "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref":
        "#/definitions/Item"}}, "400": {"description": "A parameter was invalid."},
        "403": {"description": "Write access was denied on the parent folder."}},
        "summary": "Create a new item.", "tags": ["item"]}}, "/item/{id}": {"delete":
        {"operationId": "item_deleteItem", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the document.", "in": "path",
        "name": "id", "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Write access was denied for the item."}}, "summary": "Delete an item by ID.",
        "tags": ["item"]}, "get": {"operationId": "item_getItem", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Item"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the item."}}, "summary": "Get an item by ID.", "tags": ["item"]},
        "put": {"operationId": "item_updateItem", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": true, "_upper": false, "description": "Name for the item.",
        "in": "query", "name": "name", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Description for the
        item.", "in": "query", "name": "description", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Pass this
        to move the item to a new folder.", "in": "query", "name": "folderId", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "A JSON object containing the metadata keys to add", "in":
        "formData", "name": "metadata", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Item"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "Write access
        was denied for the item or folder."}}, "summary": "Edit an item or move it
        to another folder.", "tags": ["item"]}}, "/item/{id}/copy": {"post": {"description":
        "If no folderId parameter is specified, creates a copy of the item in its
        current containing folder.", "operationId": "item_copyItem", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the original item.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the parent folder.", "in": "path", "name": "folderId", "required":
        false, "type": "string"}, {"_lower": false, "_strip": true, "_upper": false,
        "description": "Name for the new item.", "in": "query", "name": "name", "required":
        false, "type": "string"}, {"_lower": false, "_strip": true, "_upper": false,
        "description": "Description for the new item.", "in": "query", "name": "description",
        "required": false, "type": "string"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Item"}}, "400": {"description":
        "A parameter was invalid.\n\nID was invalid."}, "403": {"description": "Read
        access was denied on the original item.\n\nWrite access was denied on the
        parent folder."}}, "summary": "Copy an item.", "tags": ["item"]}}, "/item/{id}/download":
        {"get": {"operationId": "item_download", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"default":
        0, "description": "Byte offset into the file.", "format": "int32", "in": "query",
        "name": "offset", "required": false, "type": "integer"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "If unspecified, items with
        one file are downloaded as that file, and other items are downloaded as a
        zip archive.  If ''zip'', a zip archive is always sent.", "in": "query", "name":
        "format", "required": false, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "default": "attachment", "description": "Specify the
        Content-Disposition response header disposition-type value, only applied for
        single file items.", "enum": ["inline", "attachment"], "in": "query", "name":
        "contentDisposition", "required": false, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "Arbitrary data to send along
        with the download request, only applied for single file items.", "in": "query",
        "name": "extraParameters", "required": false, "type": "string"}], "produces":
        ["application/octet-stream"], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the item."}}, "summary": "Download the contents of an item.",
        "tags": ["item"]}}, "/item/{id}/files": {"get": {"operationId": "item_getFiles",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"default": 50, "description": "Result set size limit.", "format":
        "int32", "in": "query", "name": "limit", "required": false, "type": "integer"},
        {"default": 0, "description": "Offset into result set.", "format": "int32",
        "in": "query", "name": "offset", "required": false, "type": "integer"}, {"_lower":
        false, "_strip": true, "_upper": false, "default": "name", "description":
        "Field to sort the result set by.", "in": "query", "name": "sort", "required":
        false, "type": "string"}, {"default": 1, "description": "Sort order: 1 for
        ascending, -1 for descending.", "enum": [1, -1], "format": "int32", "in":
        "query", "name": "sortdir", "required": false, "type": "integer"}], "responses":
        {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/File"},
        "type": "array"}}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Read access was denied for the item."}}, "summary": "Get the files within
        an item.", "tags": ["item"]}}, "/item/{id}/metadata": {"delete": {"operationId":
        "item_deleteMetadata", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "A JSON list containing the metadata fields to delete",
        "in": "body", "name": "fields", "required": true, "schema": {"$ref": "#/definitions/string"}}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Item"}},
        "400": {"description": "ID was invalid.\n\nInvalid JSON passed in request
        body.\n\nMetadata key name was invalid."}, "403": {"description": "Write access
        was denied for the item."}}, "summary": "Delete metadata fields on an item.",
        "tags": ["item"]}, "put": {"description": "Set metadata fields to null in
        order to delete them.", "operationId": "item_setMetadata", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the document.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "A JSON object containing
        the metadata keys to add", "in": "body", "name": "metadata", "required": true,
        "schema": {"$ref": "#/definitions/string"}}, {"default": false, "description":
        "Whether \"null\" is allowed as a metadata value.", "in": "query", "name":
        "allowNull", "required": false, "type": "boolean"}], "responses": {"200":
        {"description": "Success", "schema": {"$ref": "#/definitions/Item"}}, "400":
        {"description": "ID was invalid.\n\nInvalid JSON passed in request body.\n\nMetadata
        key name was invalid."}, "403": {"description": "Write access was denied for
        the item."}}, "summary": "Set metadata fields on an item.", "tags": ["item"]}},
        "/item/{id}/rootpath": {"get": {"operationId": "item_rootpath", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Read access was denied for the item."}},
        "summary": "Get the path to the root of the item''s hierarchy.", "tags": ["item"]}},
        "/job": {"get": {"operationId": "job_listJobs", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The ID of the user
        whose jobs will be listed. If not passed or empty, will use the currently
        logged in user. If set to \"None\", will list all jobs that do not have an
        owning user.", "in": "query", "name": "userId", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Id of the parent job.", "in": "query", "name": "parentId", "required": false,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Filter for type", "in": "query", "name": "types", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Filter for status", "in": "query", "name": "statuses", "required": false,
        "type": "string"}, {"default": 50, "description": "Result set size limit.",
        "format": "int32", "in": "query", "name": "limit", "required": false, "type":
        "integer"}, {"default": 0, "description": "Offset into result set.", "format":
        "int32", "in": "query", "name": "offset", "required": false, "type": "integer"},
        {"_lower": false, "_strip": true, "_upper": false, "default": "created", "description":
        "Field to sort the result set by.", "in": "query", "name": "sort", "required":
        false, "type": "string"}, {"default": -1, "description": "Sort order: 1 for
        ascending, -1 for descending.", "enum": [1, -1], "format": "int32", "in":
        "query", "name": "sortdir", "required": false, "type": "integer"}], "responses":
        {"200": {"description": "Success"}}, "summary": "List jobs for a given user.",
        "tags": ["job"]}, "post": {"operationId": "job_createJob", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "Title of the job.",
        "in": "query", "name": "title", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Type of the job.",
        "in": "query", "name": "type", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "ID of the parent
        job.", "in": "query", "name": "parentId", "required": false, "type": "string"},
        {"default": false, "description": "Whether the job is publicly visible.",
        "in": "query", "name": "public", "required": false, "type": "boolean"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Job handler string.",
        "in": "query", "name": "handler", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Job arguments", "in":
        "query", "name": "args", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Job keyword arguments",
        "in": "query", "name": "kwargs", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Other fields specific
        to the job handler", "in": "query", "name": "otherFields", "required": false,
        "type": "string"}], "responses": {"200": {"description": "Success"}}, "summary":
        "Create a job model", "tags": ["job"]}}, "/job/all": {"get": {"operationId":
        "job_listAllJobs", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "Filter for type", "in": "query", "name": "types", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Filter for status", "in": "query", "name": "statuses", "required":
        false, "type": "string"}, {"default": 50, "description": "Result set size
        limit.", "format": "int32", "in": "query", "name": "limit", "required": false,
        "type": "integer"}, {"default": 0, "description": "Offset into result set.",
        "format": "int32", "in": "query", "name": "offset", "required": false, "type":
        "integer"}, {"_lower": false, "_strip": true, "_upper": false, "default":
        "created", "description": "Field to sort the result set by.", "in": "query",
        "name": "sort", "required": false, "type": "string"}, {"default": -1, "description":
        "Sort order: 1 for ascending, -1 for descending.", "enum": [1, -1], "format":
        "int32", "in": "query", "name": "sortdir", "required": false, "type": "integer"}],
        "responses": {"200": {"description": "Success"}}, "summary": "List all jobs.",
        "tags": ["job"]}}, "/job/typeandstatus": {"get": {"operationId": "job_jobsTypesAndStatuses",
        "responses": {"200": {"description": "Success"}}, "summary": "Get types and
        statuses of jobs of current user", "tags": ["job"]}}, "/job/typeandstatus/all":
        {"get": {"operationId": "job_allJobsTypesAndStatuses", "responses": {"200":
        {"description": "Success"}, "403": {"description": "Admin access was denied
        for the job."}}, "summary": "Get types and statuses of all jobs", "tags":
        ["job"]}}, "/job/{id}": {"delete": {"operationId": "job_deleteJob", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the job.", "in": "path", "name": "id", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Admin access was denied for the job."}},
        "summary": "Delete an existing job.", "tags": ["job"]}, "get": {"operationId":
        "job_getJob", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the job.", "in": "path", "name": "id", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "ID was invalid."}, "403": {"description": "Read access
        was denied for the job."}}, "summary": "Get a job by ID.", "tags": ["job"]},
        "put": {"description": "In most cases, regular users should not call this
        endpoint. It will typically be used by a batch processing system to send updates
        regarding the execution of the job. If using a non-user-associated token for
        authorization, the token must be granted the \"jobs.job_<id>\" scope, where
        <id> is the ID of the job being updated.", "operationId": "job_updateJob",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the job.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "A message to add to the job''s log field. If you want to overwrite any existing
        log content, pass another parameter \"overwrite=true\".", "in": "query", "name":
        "log", "required": false, "type": "string"}, {"default": false, "description":
        "If passing a log parameter, you may set this to \"true\" if you wish to overwrite
        the log field rather than append to it.", "in": "query", "name": "overwrite",
        "required": false, "type": "boolean"}, {"_lower": false, "_strip": false,
        "_upper": false, "description": "Update the status of the job. See the JobStatus
        enumeration in the constants module in this plugin for the numerical values
        of each status.", "in": "query", "name": "status", "required": false, "type":
        "string"}, {"description": "Maximum progress value, set <= 0 to indicate indeterminate
        progress for this job.", "format": "float", "in": "query", "name": "progressTotal",
        "required": false, "type": "number"}, {"description": "Current progress value.",
        "format": "float", "in": "query", "name": "progressCurrent", "required": false,
        "type": "number"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Current progress message.", "in": "query", "name": "progressMessage", "required":
        false, "type": "string"}, {"default": true, "description": "If this update
        should trigger a notification, set this field to true.", "in": "query", "name":
        "notify", "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "Write access was denied for the job."}}, "summary": "Update an existing job.",
        "tags": ["job"]}}, "/job/{id}/cancel": {"put": {"operationId": "job_cancelJob",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the job.", "in": "path", "name": "id", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success"}, "400": {"description":
        "ID was invalid."}, "403": {"description": "Write access was denied for the
        job."}}, "summary": "Cancel a job by ID.", "tags": ["job"]}}, "/notification/stream":
        {"get": {"description": "This uses long-polling to keep the connection open
        for several minutes at a time (or longer) and should be requested with an
        EventSource object or other SSE-capable client. <p>Notifications are returned
        within a few seconds of when they occur.  When no notification occurs for
        the timeout duration, the stream is closed. <p>This connection can stay open
        indefinitely long.", "operationId": "notification_stream", "parameters": [{"default":
        300, "description": "The duration without a notification before the stream
        is closed.", "format": "int32", "in": "query", "name": "timeout", "required":
        false, "type": "integer"}, {"description": "Filter out events before this
        time stamp.", "format": "int32", "in": "query", "name": "since", "required":
        false, "type": "integer"}], "produces": ["text/event-stream"], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "You are not logged in."}}, "summary":
        "Stream notifications for a given user via the SSE protocol.", "tags": ["notification"]}},
        "/resource": {"delete": {"operationId": "resource_delete", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "A JSON-encoded set
        of resources to delete. Each type is a list of ids.  For example: {\"item\":
        [(item id 1), (item id2)], \"folder\": [(folder id 1)]}.", "in": "query",
        "name": "resources", "required": true, "type": "string"}, {"default": false,
        "description": "Whether to record progress on this task.", "in": "query",
        "name": "progress", "required": false, "type": "boolean"}], "responses": {"200":
        {"description": "Success"}, "400": {"description": "Unsupported or unknown
        resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource
        not found."}, "403": {"description": "Admin access was denied for a resource."}},
        "summary": "Delete a set of items, folders, or other resources.", "tags":
        ["resource"]}}, "/resource/copy": {"post": {"operationId": "resource_copyResources",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "A JSON-encoded set of resources to copy. Each type is a list of ids.  Only
        folders and items may be specified.  For example: {\"item\": [(item id 1),
        (item id2)], \"folder\": [(folder id 1)]}.", "in": "query", "name": "resources",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Parent type for the new parent of these resources.",
        "in": "query", "name": "parentType", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Parent
        ID for the new parent of these resources.", "in": "query", "name": "parentId",
        "required": true, "type": "string"}, {"default": false, "description": "Whether
        to record progress on this task.", "in": "query", "name": "progress", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "Unsupported or unknown resource type.\n\nInvalid resources
        format.\n\nResource type not supported.\n\nNo resources specified.\n\nResource
        not found.\n\nID was invalid."}}, "summary": "Copy a set of items and folders.",
        "tags": ["resource"]}}, "/resource/download": {"get": {"description": "This
        route is also exposed via the POST method because the request parameters can
        be quite long, and encoding them in the URL (as is standard when using the
        GET method) can cause the URL to become too long, which causes errors.", "operationId":
        "resource_download", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "A JSON-encoded set of resources to download. Each type
        is a list of ids. For example: {\"item\": [(item id 1), (item id 2)], \"folder\":
        [(folder id 1)]}.", "in": "query", "name": "resources", "required": true,
        "type": "string"}, {"default": false, "description": "Include any metadata
        in JSON files in the archive.", "in": "query", "name": "includeMetadata",
        "required": false, "type": "boolean"}], "produces": ["application/octet-stream"],
        "responses": {"200": {"description": "Success"}, "400": {"description": "Unsupported
        or unknown resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource
        not found."}, "403": {"description": "Read access was denied for a resource."}},
        "summary": "Download a set of items, folders, collections, and users as a
        zip archive.", "tags": ["resource"]}, "post": {"description": "This route
        is also exposed via the POST method because the request parameters can be
        quite long, and encoding them in the URL (as is standard when using the GET
        method) can cause the URL to become too long, which causes errors.", "operationId":
        "resource_download", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "A JSON-encoded set of resources to download. Each type
        is a list of ids. For example: {\"item\": [(item id 1), (item id 2)], \"folder\":
        [(folder id 1)]}.", "in": "query", "name": "resources", "required": true,
        "type": "string"}, {"default": false, "description": "Include any metadata
        in JSON files in the archive.", "in": "query", "name": "includeMetadata",
        "required": false, "type": "boolean"}], "produces": ["application/octet-stream"],
        "responses": {"200": {"description": "Success"}, "400": {"description": "Unsupported
        or unknown resource type.\n\nInvalid resources format.\n\nNo resources specified.\n\nResource
        not found."}, "403": {"description": "Read access was denied for a resource."}},
        "summary": "Download a set of items, folders, collections, and users as a
        zip archive.", "tags": ["resource"]}}, "/resource/lookup": {"get": {"operationId":
        "resource_lookup", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The path of the resource.  The path must be an absolute
        Unix path starting with either \"/user/[user name]\", for a user''s resources
        or \"/collection/[collection name]\", for resources under a collection.",
        "in": "query", "name": "path", "required": true, "type": "string"}, {"default":
        false, "description": "Specify whether to return None instead of throwing
        an exception when path doesn''t exist.", "in": "query", "name": "test", "required":
        false, "type": "boolean"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "Path is invalid.\n\nPath refers to a resource that
        does not exist."}, "403": {"description": "Read access was denied for the
        resource."}}, "summary": "Look up a resource in the data hierarchy by path.",
        "tags": ["resource"]}}, "/resource/move": {"put": {"operationId": "resource_moveResources",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "A JSON-encoded set of resources to move. Each type is a list of ids.  Only
        folders and items may be specified.  For example: {\"item\": [(item id 1),
        (item id2)], \"folder\": [(folder id 1)]}.", "in": "query", "name": "resources",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Parent type for the new parent of these resources.",
        "enum": ["user", "collection", "folder"], "in": "query", "name": "parentType",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Parent ID for the new parent of these resources.",
        "in": "query", "name": "parentId", "required": true, "type": "string"}, {"default":
        false, "description": "Whether to record progress on this task.", "in": "query",
        "name": "progress", "required": false, "type": "boolean"}], "responses": {"200":
        {"description": "Success"}, "400": {"description": "Unsupported or unknown
        resource type.\n\nInvalid resources format.\n\nResource type not supported.\n\nNo
        resources specified.\n\nResource not found.\n\nID was invalid."}}, "summary":
        "Move a set of items and folders.", "tags": ["resource"]}}, "/resource/search":
        {"get": {"operationId": "resource_search", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The search query.", "in":
        "query", "name": "q", "required": true, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "default": "text", "description": "The search
        mode. Can always use either a text search or a prefix-based search.", "in":
        "query", "name": "mode", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "A JSON list of resource
        types to search for, e.g. [\"user\", \"folder\", \"item\"].", "in": "query",
        "name": "types", "required": true, "type": "string"}, {"default": 0, "description":
        "Minimum required access level.", "format": "int32", "in": "query", "name":
        "level", "required": false, "type": "integer"}, {"default": 10, "description":
        "Result set size limit.", "format": "int32", "in": "query", "name": "limit",
        "required": false, "type": "integer"}, {"default": 0, "description": "Offset
        into result set.", "format": "int32", "in": "query", "name": "offset", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "Invalid type list format."}}, "summary": "Search for
        resources in the system.", "tags": ["resource"]}}, "/resource/{id}": {"get":
        {"operationId": "resource_getResource", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The ID of the resource.", "in": "path",
        "name": "id", "required": true, "type": "string"}, {"_lower": false, "_strip":
        false, "_upper": false, "description": "The type of the resource (item, file,
        etc.).", "in": "query", "name": "type", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "400": {"description": "ID
        was invalid."}, "403": {"description": "Read access was denied for the resource."}},
        "summary": "Get any resource by ID.", "tags": ["resource"]}}, "/resource/{id}/path":
        {"get": {"operationId": "resource_path", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "The ID of the resource.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The type of the resource
        (item, file, etc.).", "in": "query", "name": "type", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success"}, "400": {"description":
        "ID was invalid.\n\nInvalid resource type."}, "403": {"description": "Read
        access was denied for the resource."}}, "summary": "Get path of a resource.",
        "tags": ["resource"]}}, "/resource/{id}/timestamp": {"put": {"operationId":
        "resource_setTimestamp", "parameters": [{"_lower": false, "_strip": false,
        "_upper": false, "description": "The ID of the resource.", "in": "path", "name":
        "id", "required": true, "type": "string"}, {"_lower": false, "_strip": false,
        "_upper": false, "description": "The type of the resource (item, file, etc.).",
        "in": "query", "name": "type", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The new created timestamp.",
        "in": "query", "name": "created", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The new updated timestamp.",
        "in": "query", "name": "updated", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "ID was invalid."},
        "403": {"description": "Access was denied for the resource."}}, "summary":
        "Set the created or updated timestamp for a resource.", "tags": ["resource"]}},
        "/system/access_flag": {"get": {"operationId": "system_getAccessFlags", "responses":
        {"200": {"description": "Success"}}, "summary": "List all access flags available
        in the system.", "tags": ["system"]}}, "/system/check": {"get": {"description":
        "Must be a system administrator to call this with any mode other than basic.",
        "operationId": "system_systemStatus", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "default": "basic", "description": "Select details
        to return. \"quick\" are the details that can be answered without much load
        on the system. \"slow\" also includes some resource-intensive queries.", "enum":
        ["basic", "quick", "slow"], "in": "query", "name": "mode", "required": false,
        "type": "string"}], "responses": {"200": {"description": "Success"}, "403":
        {"description": "You are not a system administrator."}}, "summary": "Report
        the current system status.", "tags": ["system"]}, "put": {"description": "Must
        be a system administrator to call this.  This verifies and corrects some issues,
        such as incorrect folder sizes.", "operationId": "system_systemConsistencyCheck",
        "parameters": [{"default": false, "description": "Whether to record progress
        on this task.", "in": "query", "name": "progress", "required": false, "type":
        "boolean"}], "responses": {"200": {"description": "Success"}, "403": {"description":
        "You are not a system administrator."}}, "summary": "Perform a variety of
        system checks to verify that all is well.", "tags": ["system"]}}, "/system/configuration":
        {"get": {"description": "Must be a system administrator to call this.", "operationId":
        "system_getConfigurationOption", "parameters": [{"_lower": false, "_strip":
        false, "_upper": false, "description": "The section identifying the configuration
        option.", "in": "query", "name": "section", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The key
        identifying the configuration option.", "in": "query", "name": "key", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "403": {"description": "You are not a system administrator."}, "404": {"description":
        "No such option with the given section/key exists."}}, "summary": "Get the
        value of a system configuration option.", "tags": ["system"]}}, "/system/log":
        {"get": {"description": "Must be a system administrator to call this.", "operationId":
        "system_getLog", "parameters": [{"default": 4096, "description": "Controls
        how many bytes (from the end of the log) to show. Pass 0 to show the whole
        log.", "format": "int32", "in": "query", "name": "bytes", "required": false,
        "type": "integer"}, {"_lower": false, "_strip": false, "_upper": false, "default":
        "error", "description": "Which log to tail.", "enum": ["error", "info"], "in":
        "query", "name": "log", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "403": {"description": "You are not a
        system administrator."}}, "summary": "Show the most recent contents of the
        server logs.", "tags": ["system"]}}, "/system/log/level": {"get": {"description":
        "Must be a system administrator to call this.", "operationId": "system_getLogLevel",
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Get the current log level.",
        "tags": ["system"]}, "put": {"description": "Must be a system administrator
        to call this.", "operationId": "system_setLogLevel", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "default": "INFO", "description":
        "The new level to set.", "enum": ["CRITICAL", "ERROR", "WARNING", "INFO",
        "DEBUG"], "in": "query", "name": "level", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Get the current log level.",
        "tags": ["system"]}}, "/system/plugins": {"get": {"description": "Must be
        a system administrator to call this.", "operationId": "system_getPlugins",
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Get the lists of all available
        and all enabled plugins.", "tags": ["system"]}, "put": {"description": "Must
        be a system administrator to call this.", "operationId": "system_enablePlugins",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "JSON array of plugins to enable.", "in": "query", "name": "plugins", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Setting"}}, "403": {"description": "You
        are not a system administrator."}, "500": {"description": "Required dependencies
        do not exist."}}, "summary": "Set the list of enabled plugins for the system.",
        "tags": ["system"]}}, "/system/restart": {"put": {"description": "Must be
        a system administrator to call this.", "operationId": "system_restartServer",
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Restart the Girder REST server.",
        "tags": ["system"]}}, "/system/setting": {"delete": {"description": "Must
        be a system administrator to call this. This is used to explicitly restore
        a setting to its default value.", "operationId": "system_unsetSetting", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The key
        identifying the setting to unset.", "in": "query", "name": "key", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "403": {"description": "You are not a system administrator."}}, "summary":
        "Unset the value for a system setting.", "tags": ["system"]}, "get": {"description":
        "Must be a system administrator to call this.", "operationId": "system_getSetting",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The key identifying this setting.", "in": "query", "name": "key", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "A JSON list of keys representing a set of settings to return.",
        "in": "query", "name": "list", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "If \"none\", return
        a null value if a setting is currently the default value. If \"default\",
        return the default value of the setting(s).", "in": "query", "name": "default",
        "required": false, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "403": {"description": "You are not a system administrator."}},
        "summary": "Get the value of a system setting, or a list of them.", "tags":
        ["system"]}, "put": {"description": "Must be a system administrator to call
        this. If the value passed is a valid JSON object, it will be parsed and stored
        as an object.", "operationId": "system_setSetting", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The key identifying
        this setting.", "in": "query", "name": "key", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The value
        for this setting.", "in": "query", "name": "value", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "A JSON list of objects with key and value representing a list of settings
        to set.", "in": "query", "name": "list", "required": false, "type": "string"}],
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}, "500": {"description": "Failed to set system
        setting."}}, "summary": "Set the value for a system setting, or a list of
        them.", "tags": ["system"]}}, "/system/setting/collection_creation_policy/access":
        {"get": {"description": "Get result in the same structure as the access endpointsof
        collection, file, and group", "operationId": "system_getCollectionCreationPolicyAccess",
        "responses": {"200": {"description": "Success"}}, "summary": "Get access of
        content creation policy.", "tags": ["system"]}}, "/system/uploads": {"delete":
        {"description": "Must be a system administrator to call this. This frees resources
        that were allocated for the uploads and clears the uploads from database.",
        "operationId": "system_discardPartialUploads", "parameters": [{"_lower": false,
        "_strip": false, "_upper": false, "description": "Clear only a specific upload.",
        "in": "query", "name": "uploadId", "required": false, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "Restrict clearing
        uploads to those started by a specific user.", "in": "query", "name": "userId",
        "required": false, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Restrict clearing uploads to those within a specific
        folder or item.", "in": "query", "name": "parentId", "required": false, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Restrict clearing uploads within a specific assetstore.", "in": "query",
        "name": "assetstoreId", "required": false, "type": "string"}, {"description":
        "Restrict clearing uploads to those that are at least this many days old.",
        "format": "float", "in": "query", "name": "minimumAge", "required": false,
        "type": "number"}, {"default": true, "description": "Some assetstores can
        have partial uploads that are no longer in the Girder database.  If this is
        True, remove all of them (only filtered by assetstoreId).", "in": "query",
        "name": "includeUntracked", "required": false, "type": "boolean"}], "responses":
        {"200": {"description": "Success"}, "403": {"description": "You are not a
        system administrator."}, "500": {"description": "Failed to delete upload"}},
        "summary": "Discard uploads that have not been finished.", "tags": ["system"]},
        "get": {"description": "Must be a system administrator to call this.", "operationId":
        "system_getPartialUploads", "parameters": [{"_lower": false, "_strip": false,
        "_upper": false, "description": "List only a specific upload.", "in": "query",
        "name": "uploadId", "required": false, "type": "string"}, {"_lower": false,
        "_strip": false, "_upper": false, "description": "Restrict listing uploads
        to those started by a specific user.", "in": "query", "name": "userId", "required":
        false, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "Restrict listing uploads to those within a specific folder
        or item.", "in": "query", "name": "parentId", "required": false, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "Restrict
        listing uploads within a specific assetstore.", "in": "query", "name": "assetstoreId",
        "required": false, "type": "string"}, {"description": "Restrict listing uploads
        to those that are at least this many days old.", "format": "float", "in":
        "query", "name": "minimumAge", "required": false, "type": "number"}, {"default":
        true, "description": "Some assetstores can have partial uploads that are no
        longer in the Girder database.  If this is True, include all of them (only
        filtered by assetstoreId) in the result list.", "in": "query", "name": "includeUntracked",
        "required": false, "type": "boolean"}, {"default": 50, "description": "Result
        set size limit.", "format": "int32", "in": "query", "name": "limit", "required":
        false, "type": "integer"}, {"default": 0, "description": "Offset into result
        set.", "format": "int32", "in": "query", "name": "offset", "required": false,
        "type": "integer"}, {"_lower": false, "_strip": true, "_upper": false, "default":
        "updated", "description": "Field to sort the result set by.", "in": "query",
        "name": "sort", "required": false, "type": "string"}, {"default": 1, "description":
        "Sort order: 1 for ascending, -1 for descending.", "enum": [1, -1], "format":
        "int32", "in": "query", "name": "sortdir", "required": false, "type": "integer"}],
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Get a list of uploads that
        have not been finished.", "tags": ["system"]}}, "/system/version": {"get":
        {"operationId": "system_getVersion", "responses": {"200": {"description":
        "Success"}}, "summary": "Get the version information for this server.", "tags":
        ["system"]}}, "/system/web_build": {"post": {"operationId": "system_buildWebCode",
        "parameters": [{"default": false, "description": "Whether to record progress
        on this task.", "in": "query", "name": "progress", "required": false, "type":
        "boolean"}, {"default": false, "description": "Whether to build for development
        mode.", "in": "query", "name": "dev", "required": false, "type": "boolean"}],
        "responses": {"200": {"description": "Success"}}, "summary": "Rebuild web
        client code.", "tags": ["system"]}}, "/token/current": {"get": {"operationId":
        "token_currentSession", "responses": {"200": {"description": "Success", "schema":
        {"$ref": "#/definitions/Token"}}}, "summary": "Retrieve the current session
        information.", "tags": ["token"]}}, "/token/scopes": {"get": {"operationId":
        "token_listScopes", "responses": {"200": {"description": "Success"}}, "summary":
        "List all token scopes available in the system.", "tags": ["token"]}}, "/token/session":
        {"delete": {"description": "Attempts to delete your authentication cookie.",
        "operationId": "token_deleteSession", "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/Token"}}}, "summary": "Remove
        a session from the system.", "tags": ["token"]}, "get": {"description": "If
        you are logged in, this will return a token associated with that login.",
        "operationId": "token_getSession", "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Token"}}}, "summary": "Get an anonymous
        session token for the system.", "tags": ["token"]}}, "/user": {"get": {"operationId":
        "user_find", "parameters": [{"_lower": false, "_strip": false, "_upper": false,
        "description": "Pass this to perform a full text search for items.", "in":
        "query", "name": "text", "required": false, "type": "string"}, {"default":
        50, "description": "Result set size limit.", "format": "int32", "in": "query",
        "name": "limit", "required": false, "type": "integer"}, {"default": 0, "description":
        "Offset into result set.", "format": "int32", "in": "query", "name": "offset",
        "required": false, "type": "integer"}, {"_lower": false, "_strip": true, "_upper":
        false, "default": "lastName", "description": "Field to sort the result set
        by.", "in": "query", "name": "sort", "required": false, "type": "string"},
        {"default": 1, "description": "Sort order: 1 for ascending, -1 for descending.",
        "enum": [1, -1], "format": "int32", "in": "query", "name": "sortdir", "required":
        false, "type": "integer"}], "responses": {"200": {"description": "Success",
        "schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}}, "summary":
        "List or search for users.", "tags": ["user"]}, "post": {"operationId": "user_createUser",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The user''s requested login.", "in": "query", "name": "login", "required":
        true, "type": "string"}, {"_lower": false, "_strip": false, "_upper": false,
        "description": "The user''s email address.", "in": "query", "name": "email",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The user''s first name.", "in": "query", "name": "firstName",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The user''s last name.", "in": "query", "name": "lastName",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "The user''s requested password", "in": "query", "name":
        "password", "required": true, "type": "string"}, {"default": false, "description":
        "Whether this user should be a site administrator.", "in": "query", "name":
        "admin", "required": false, "type": "boolean"}], "responses": {"200": {"description":
        "Success", "schema": {"$ref": "#/definitions/User"}}, "400": {"description":
        "A parameter was invalid, or the specified login or email already exists in
        the system."}}, "summary": "Create a new user.", "tags": ["user"]}}, "/user/authentication":
        {"delete": {"description": "Attempts to delete your authentication cookie.",
        "operationId": "user_logout", "responses": {"200": {"description": "Success",
        "schema": {"$ref": "#/definitions/Token"}}}, "summary": "Log out of the system.",
        "tags": ["user"]}, "get": {"description": "Pass your username and password
        using HTTP Basic Auth. Sends a cookie that should be passed back in future
        requests.", "operationId": "user_login", "responses": {"200": {"description":
        "Success"}, "401": {"description": "Missing Authorization header."}, "403":
        {"description": "Invalid login or password."}}, "summary": "Log in to the
        system.", "tags": ["user"]}}, "/user/details": {"get": {"operationId": "user_getUsersDetails",
        "responses": {"200": {"description": "Success"}, "403": {"description": "You
        are not a system administrator."}}, "summary": "Get detailed information about
        all users.", "tags": ["user"]}}, "/user/me": {"get": {"operationId": "user_getMe",
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}}},
        "summary": "Retrieve the currently logged-in user information.", "tags": ["user"]}},
        "/user/password": {"put": {"operationId": "user_changePassword", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "Your
        current password or a temporary access token.", "in": "query", "name": "old",
        "required": true, "type": "string"}, {"_lower": false, "_strip": false, "_upper":
        false, "description": "Your new password.", "in": "query", "name": "new",
        "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "Your new password is invalid."}, "401":
        {"description": "You are not logged in.\n\nYour old password is incorrect."}},
        "summary": "Change your password.", "tags": ["user"]}}, "/user/password/temporary":
        {"put": {"operationId": "user_generateTemporaryPassword", "parameters": [{"_lower":
        false, "_strip": true, "_upper": false, "description": "Your email address.",
        "in": "query", "name": "email", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "That email does
        not exist in the system."}}, "summary": "Create a temporary access token for
        a user.  The user''s password is not changed.", "tags": ["user"]}}, "/user/password/temporary/{id}":
        {"get": {"operationId": "user_checkTemporaryPassword", "parameters": [{"_lower":
        false, "_strip": false, "_upper": false, "description": "The user ID to check.",
        "in": "path", "name": "id", "required": true, "type": "string"}, {"_lower":
        false, "_strip": false, "_upper": false, "description": "The token to check.",
        "in": "query", "name": "token", "required": true, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "401": {"description": "The token does
        not grant temporary access to the specified user."}}, "summary": "Check if
        a specified token is a temporary access token for the specified user.  If
        the token is valid, returns information on the token and user.", "tags": ["user"]}},
        "/user/verification": {"post": {"operationId": "user_sendVerificationEmail",
        "parameters": [{"_lower": false, "_strip": true, "_upper": false, "description":
        "Your login or email address.", "in": "query", "name": "login", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "401": {"description": "That login is not registered."}}, "summary": "Send
        verification email.", "tags": ["user"]}}, "/user/{id}": {"delete": {"operationId":
        "user_deleteUser", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "ID was invalid."}, "403": {"description":
        "You do not have permission to delete this user."}}, "summary": "Delete a
        user by ID.", "tags": ["user"]}, "get": {"operationId": "user_getUser", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"}],
        "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/User"}},
        "400": {"description": "ID was invalid."}, "403": {"description": "You do
        not have permission to see this user."}}, "summary": "Get a user by ID.",
        "tags": ["user"]}, "put": {"operationId": "user_updateUser", "parameters":
        [{"_lower": false, "_strip": false, "_upper": false, "description": "The ID
        of the document.", "in": "path", "name": "id", "required": true, "type": "string"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "First
        name of the user.", "in": "query", "name": "firstName", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "Last name of the user.", "in": "query", "name": "lastName", "required": true,
        "type": "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The email of the user.", "in": "query", "name": "email", "required": true,
        "type": "string"}, {"description": "Is the user a site admin (admin access
        required)", "in": "query", "name": "admin", "required": false, "type": "boolean"},
        {"_lower": false, "_strip": false, "_upper": false, "description": "The account
        status (admin access required)", "enum": ["pending", "enabled", "disabled"],
        "in": "query", "name": "status", "required": false, "type": "string"}], "responses":
        {"200": {"description": "Success"}, "400": {"description": "A parameter was
        invalid."}, "403": {"description": "You do not have write access for this
        user.\n\nMust be an admin to create an admin."}}, "summary": "Update a user''s
        information.", "tags": ["user"]}}, "/user/{id}/details": {"get": {"operationId":
        "user_getUserDetails", "parameters": [{"_lower": false, "_strip": false, "_upper":
        false, "description": "The ID of the document.", "in": "path", "name": "id",
        "required": true, "type": "string"}], "responses": {"200": {"description":
        "Success"}, "400": {"description": "A parameter was invalid."}, "403": {"description":
        "Read access was denied on the user."}}, "summary": "Get detailed information
        about a user.", "tags": ["user"]}}, "/user/{id}/password": {"put": {"description":
        "Only administrators may use this endpoint.", "operationId": "user_changeUserPassword",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The ID of the document.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The user''s new password.", "in": "query", "name": "password", "required":
        true, "type": "string"}], "responses": {"200": {"description": "Success"},
        "400": {"description": "The new password is invalid."}, "403": {"description":
        "You are not an administrator."}}, "summary": "Change a user''s password.",
        "tags": ["user"]}}, "/user/{id}/verification": {"put": {"operationId": "user_verifyEmail",
        "parameters": [{"_lower": false, "_strip": false, "_upper": false, "description":
        "The user ID to check.", "in": "path", "name": "id", "required": true, "type":
        "string"}, {"_lower": false, "_strip": false, "_upper": false, "description":
        "The token to check.", "in": "query", "name": "token", "required": true, "type":
        "string"}], "responses": {"200": {"description": "Success"}, "401": {"description":
        "The token is invalid or expired."}}, "summary": "Verify an email address
        using a token.", "tags": ["user"]}}, "/worker/status": {"get": {"description":
        "Note", "operationId": "worker_getWorkerStatus", "responses": {"200": {"description":
        "Success"}}, "summary": "Get workers status.", "tags": ["worker"]}}, "/worker/task":
        {"get": {"operationId": "worker_runTask", "responses": {"200": {"description":
        "Success"}}, "summary": "Get workers status.", "tags": ["worker"]}}}, "swagger":
        "2.0", "tags": [{"name": "api_key"}, {"name": "app"}, {"name": "assetstore"},
        {"name": "collection"}, {"name": "file"}, {"name": "folder"}, {"name": "group"},
        {"name": "item"}, {"name": "job"}, {"name": "notification"}, {"name": "resource"},
        {"name": "system"}, {"name": "token"}, {"name": "user"}, {"name": "worker"}]}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['140912']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: !!python/object/new:_io.BytesIO
      state: !!python/tuple
      - !!binary |
        Q29udGVudCBvZiB0aGUgZmlsZSBudW1iZXIgMQ==
      - 0
      - null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['28']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file/chunk?offset=0&uploadId=5ade6624bf0ca6ada13bde5c
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde5d", "_modelType": "file", "assetstoreId":
        "5a57cabaf99f330b58dc2228", "created": "2018-04-23T23:03:00.384812+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "exts": ["txt"], "itemId": "5ade6624bf0ca6ada13bde5b",
        "mimeType": "application/octet-stream", "name": "file1.txt", "size": 28}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['317']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=draft
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde54", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.021000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "Uploaded each night,
        always up-to-date", "lowerName": "draft", "name": "draft", "parentCollection":
        "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public": true, "size":
        0, "updated": "2018-04-23T23:03:00.021000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['598']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=linux&arch=amd64&baseName=ext2&app_revision=extR002&release_id=5ade6624bf0ca6ada13bde54&limit=50&sort=created&sortDir=-1
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=linux&arch=amd64&baseName=ext2&repository_type=git&repository_url=git%40github.com%3Aext2.git&revision=r301&app_revision=extR002&packagetype=&codebase=&description=
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde60", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.610176+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5f",
        "lowerName": "extr002_ext2_linux_amd64_r301", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR002", "arch": "amd64", "baseName": "ext2", "codebase":
        "", "description": "", "os": "linux", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext2.git", "revision": "r301"}, "name":
        "extR002_ext2_linux_amd64_r301", "size": 0, "updated": "2018-04-23T23:03:00.611609+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['675']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1/item/5ade6624bf0ca6ada13bde60/files
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file?parentType=item&parentId=5ade6624bf0ca6ada13bde60&name=file2.txt&size=28&mimeType=application%2Foctet-stream
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde61", "assetstoreId": "5a57cabaf99f330b58dc2228",
        "created": "2018-04-23T23:03:00.651002+00:00", "mimeType": "application/octet-stream",
        "name": "file2.txt", "parentId": "5ade6624bf0ca6ada13bde60", "parentType":
        "item", "received": 0, "sha512state": "b''08c9bcf367e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000''",
        "size": 28, "tempFile": "/Users/pierre.assemat/assetstore/temp/tmpzaydwiqm",
        "updated": "2018-04-23T23:03:00.652105+00:00", "userId": "5ab5422344e48104c10bcc26"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['880']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: !!python/object/new:_io.BytesIO
      state: !!python/tuple
      - !!binary |
        Q29udGVudCBvZiB0aGUgZmlsZSBudW1iZXIgMg==
      - 0
      - null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['28']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file/chunk?offset=0&uploadId=5ade6624bf0ca6ada13bde61
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde62", "_modelType": "file", "assetstoreId":
        "5a57cabaf99f330b58dc2228", "created": "2018-04-23T23:03:00.675739+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "exts": ["txt"], "itemId": "5ade6624bf0ca6ada13bde60",
        "mimeType": "application/octet-stream", "name": "file2.txt", "size": 28}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['317']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=draft
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde54", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.021000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "Uploaded each night,
        always up-to-date", "lowerName": "draft", "name": "draft", "parentCollection":
        "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public": true, "size":
        0, "updated": "2018-04-23T23:03:00.021000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['598']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=win&arch=i386&baseName=ext3&app_revision=r000&release_id=5ade6624bf0ca6ada13bde54&limit=50&sort=created&sortDir=-1
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?os=win&arch=i386&baseName=ext3&repository_type=git&repository_url=git%40github.com%3Aext3.git&revision=r302&app_revision=r000&packagetype=&codebase=&description=
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde64", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.896751+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde63",
        "lowerName": "r000_ext3_win_i386_r302", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "r000", "arch": "i386", "baseName": "ext3", "codebase": "",
        "description": "", "os": "win", "packagetype": "", "repository_type": "git",
        "repository_url": "git@github.com:ext3.git", "revision": "r302"}, "name":
        "r000_ext3_win_i386_r302", "size": 0, "updated": "2018-04-23T23:03:00.898223+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['657']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1/item/5ade6624bf0ca6ada13bde64/files
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file?parentType=item&parentId=5ade6624bf0ca6ada13bde64&name=file3.txt&size=28&mimeType=application%2Foctet-stream
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde65", "assetstoreId": "5a57cabaf99f330b58dc2228",
        "created": "2018-04-23T23:03:00.941471+00:00", "mimeType": "application/octet-stream",
        "name": "file3.txt", "parentId": "5ade6624bf0ca6ada13bde64", "parentType":
        "item", "received": 0, "sha512state": "b''08c9bcf367e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000''",
        "size": 28, "tempFile": "/Users/pierre.assemat/assetstore/temp/tmpiwuzv325",
        "updated": "2018-04-23T23:03:00.942561+00:00", "userId": "5ab5422344e48104c10bcc26"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['880']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: !!python/object/new:_io.BytesIO
      state: !!python/tuple
      - !!binary |
        Q29udGVudCBvZiB0aGUgZmlsZSBudW1iZXIgMw==
      - 0
      - null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['28']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: POST
    uri: http://localhost:8080/api/v1/file/chunk?offset=0&uploadId=5ade6624bf0ca6ada13bde65
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde66", "_modelType": "file", "assetstoreId":
        "5a57cabaf99f330b58dc2228", "created": "2018-04-23T23:03:00.966957+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "exts": ["txt"], "itemId": "5ade6624bf0ca6ada13bde64",
        "mimeType": "application/octet-stream", "name": "file3.txt", "size": 28}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['317']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:00 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=draft
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde54", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.021000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "Uploaded each night,
        always up-to-date", "lowerName": "draft", "name": "draft", "parentCollection":
        "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public": true, "size":
        0, "updated": "2018-04-23T23:03:00.021000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['598']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?release_id=5ade6624bf0ca6ada13bde54&limit=50&sort=created&sortDir=-1
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde60", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.610000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5f",
        "lowerName": "extr002_ext2_linux_amd64_r301", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR002", "arch": "amd64", "baseName": "ext2", "codebase":
        "", "description": "", "os": "linux", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext2.git", "revision": "r301"}, "name":
        "extR002_ext2_linux_amd64_r301", "size": 28, "updated": "2018-04-23T23:03:00.611000+00:00"},
        {"_id": "5ade6624bf0ca6ada13bde5b", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.301000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5a",
        "lowerName": "extr001_ext1_macosx_amd64_r300", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR001", "arch": "amd64", "baseName": "ext1", "codebase":
        "", "description": "", "os": "macosx", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext1.git", "revision": "r300"}, "name":
        "extR001_ext1_macosx_amd64_r300", "size": 28, "updated": "2018-04-23T23:03:00.303000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['1359']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?extension_name=extR001_ext1_macosx_amd64_r300
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde5b", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.301000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5a",
        "lowerName": "extr001_ext1_macosx_amd64_r300", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR001", "arch": "amd64", "baseName": "ext1", "codebase":
        "", "description": "", "os": "macosx", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext1.git", "revision": "r300"}, "name":
        "extR001_ext1_macosx_amd64_r300", "size": 28, "updated": "2018-04-23T23:03:00.303000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['681']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: DELETE
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension/5ade6624bf0ca6ada13bde5b
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde5b", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.301000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5a",
        "lowerName": "extr001_ext1_macosx_amd64_r300", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR001", "arch": "amd64", "baseName": "ext1", "codebase":
        "", "description": "", "os": "macosx", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext1.git", "revision": "r300"}, "name":
        "extR001_ext1_macosx_amd64_r300", "size": 28, "updated": "2018-04-23T23:03:00.303000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['679']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/release?release_id_or_name=draft
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde54", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.021000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "Uploaded each night,
        always up-to-date", "lowerName": "draft", "name": "draft", "parentCollection":
        "folder", "parentId": "5ade6624bf0ca6ada13bde53", "public": true, "size":
        0, "updated": "2018-04-23T23:03:00.021000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['598']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?release_id=5ade6624bf0ca6ada13bde54&limit=50&sort=created&sortDir=-1
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde60", "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.610000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "", "folderId": "5ade6624bf0ca6ada13bde5f",
        "lowerName": "extr002_ext2_linux_amd64_r301", "meta": {"app_id": "5ade6624bf0ca6ada13bde53",
        "app_revision": "extR002", "arch": "amd64", "baseName": "ext2", "codebase":
        "", "description": "", "os": "linux", "packagetype": "", "repository_type":
        "git", "repository_url": "git@github.com:ext2.git", "revision": "r301"}, "name":
        "extR002_ext2_linux_amd64_r301", "size": 28, "updated": "2018-04-23T23:03:00.611000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['678']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53/extension?extension_name=extR001_ext1_macosx_amd64_r300
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: DELETE
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde53
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde53", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.019000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        1", "lowerName": "app", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.023000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['741']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App1
  response:
    body: {string: '[{"_id": "5ade6624bf0ca6ada13bde55", "access": {"groups": [],
        "users": [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags":
        [], "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.055000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        2", "lowerName": "app1", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App1", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.058000+00:00"}]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['745']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['0']
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: DELETE
    uri: http://localhost:8080/api/v1//app/5ade6624bf0ca6ada13bde55
  response:
    body: {string: '{"_id": "5ade6624bf0ca6ada13bde55", "access": {"groups": [], "users":
        [{"flags": [], "id": "5a36eb8744e4810bc20efc66", "level": 2}, {"flags": [],
        "id": "5ab5422344e48104c10bcc26", "level": 2}]}, "baseParentId": "5a57b6a3f99f330b585e6f50",
        "baseParentType": "collection", "created": "2018-04-23T23:03:00.055000+00:00",
        "creatorId": "5ab5422344e48104c10bcc26", "description": "random description
        2", "lowerName": "app1", "meta": {"applicationPackageNameTemplate": "{baseName}_{os}_{arch}_{revision}",
        "extensionPackageNameTemplate": "{app_revision}_{baseName}_{os}_{arch}_{revision}"},
        "name": "App1", "parentCollection": "folder", "parentId": "5a9919f944e48102a1e3577b",
        "public": true, "size": 0, "updated": "2018-04-23T23:03:00.058000+00:00"}'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['743']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Girder-Token: [4afhpHxD07iyWehuGNzvAAaK7eLCbCMChSdE0drhoK1YW9JuF6aqFs0K5dzlzQH7]
      User-Agent: [python-requests/2.18.4]
    method: GET
    uri: http://localhost:8080/api/v1//app?name=App2
  response:
    body: {string: '[]'}
    headers:
      Allow: ['DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT']
      Content-Length: ['2']
      Content-Type: [application/json]
      Date: ['Mon, 23 Apr 2018 23:03:01 GMT']
      Server: [Girder 2.5.0]
    status: {code: 200, message: OK}
version: 1
